from google import genai
import os
from dotenv import load_dotenv
import json

load_dotenv()
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

def call_gemini(api_key: str, system_message: str, data_results_message: dict, data_results_bool: dict, sign_results_message: dict, sign_results_bool: dict):
    """
    Calls the Gemini API to generate content based on validation results.

    Args:
        api_key (str): API key for Gemini.
        system_message (str): Instruction prompt describing the assistant's role and context.
        data_results_message (dict): Dictionary with explanatory messages for each data validation.
        data_results_bool (dict): Dictionary with boolean results of data validations.
        sign_results_message (dict): Dictionary with explanatory messages for signature validations.
        sign_results_bool (dict): Dictionary with boolean results of signature validations.

    Returns:
        genai.types.GenerateContentResponse: The response generated by the Gemini model.
    """
    prompt = f"{system_message}\n\nDiccionarios con los resultados:\n{data_results_message}\n\n{data_results_bool}\n\n{sign_results_message}\n\n{sign_results_bool}\n\n"
    client = genai.Client(api_key=api_key)
    response = client.models.generate_content(model="gemini-2.0-flash", contents=prompt)
    return response

class RulingMaker:
    """
    Class responsible for generating a legal ruling based on validation results
    of document data and signatures using the Gemini API.

    Methods:
        parse_json(response): Extracts and returns the generated text from the JSON response.
        obtener_dictamen(): Runs the full pipeline to generate a decision from the input data.
    """
    def __init__(self, data_results_message, data_results_bool, sign_results_message, sign_results_bool, api_key):
        """
        Initializes the RulingMaker object.

        Args:
            data_results_message (dict): Messages explaining the outcome of each data validation.
            data_results_bool (dict): Boolean results of data validations.
            sign_results_message (dict): Messages explaining the outcome of each signature validation.
            sign_results_bool (dict): Boolean results of signature validations.
            api_key (str): API key for Gemini authentication.
        """
        self.data_results_message = data_results_message
        self.data_results_bool = data_results_bool
        self.sign_results_message = sign_results_message
        self.sign_results_bool = sign_results_bool
        self.api_key = api_key
        self.system_message = """
            Eres un asistente legal y administrativo experto encargado de analizar los resultados de validación de documentos relacionados con un vehículo en el contexto de un proceso de empeño.

            Recibirás cuatro diccionarios como entrada:

            data_results_message: diccionario con mensajes que explican el resultado de cada validación de datos.
            data_results_bool: diccionario con valores booleanos (True o False) que indican si cada validación de datos fue superada.
            sign_results_message: diccionario con mensajes que explican el resultado de cada validación de firmas.
            sign_results_bool: diccionario con valores booleanos (True o False) que indican si cada validación de firmas fue superada.
            Los cuatro diccionarios comparten la misma estructura: cada clave representa una validación específica, y su valor correspondiente indica el resultado (mensaje o booleano).

            Tu tarea es generar un fallo conciso que resuma el resultado de todas las validaciones e indique si el vehículo puede ser empeñado.

            Si todos los valores booleanos son True, devuelve un mensaje positivo y claro indicando que el vehículo puede ser empeñado.
            Si algún valor booleano es False, debes indicar claramente:
            Que el vehículo no puede ser empeñado,
            Cuáles validaciones fallaron, y
            Por qué fallaron, utilizando los mensajes correspondientes de los diccionarios *_results_message.
            Importante: No comiences el texto con la palabra “Dictamen”, ya que será añadida como título por separado.

            Estructura la respuesta en uno a tres párrafos breves como máximo. Sé formal, preciso y evita repeticiones innecesarias.   
        """ 

    def parse_json(self, response):
        """
        Extracts the generated text from the Gemini JSON response.

        Args:
            response (genai.types.GenerateContentResponse): Response from the Gemini API.

        Returns:
            str: The processed and extracted text generated by the model.
        """
        json_response = response.model_dump_json()
        json_data = json.loads(json_response)
        json_processed = json_data['candidates'][0]['content']['parts'][0]['text']
        return json_processed
    
    def obtener_dictamen(self):
        """
        Executes the full pipeline to generate a ruling using the Gemini API.

        Returns:
            str: The final decision generated based on validation results.
        """
        response = call_gemini(
            self.api_key, 
            self.system_message, 
            self.data_results_message, 
            self.data_results_bool, 
            self.sign_results_message, 
            self.sign_results_bool
        )
        return self.parse_json(response)